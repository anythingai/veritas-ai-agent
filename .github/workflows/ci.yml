name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  # Browser Extension Tests
  browser-extension:
    name: Browser Extension
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: browser-extension/package-lock.json
        
    - name: Install dependencies
      working-directory: browser-extension
      run: npm ci
      
    - name: Lint
      working-directory: browser-extension
      run: npm run lint
      
    - name: Type check
      working-directory: browser-extension
      run: npm run type-check
      
    - name: Run tests
      working-directory: browser-extension
      run: npm run test:coverage
      
    - name: Build extension
      working-directory: browser-extension
      run: npm run build
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: browser-extension/coverage/lcov.info
        flags: browser-extension
        name: browser-extension-coverage

  # Backend Service Tests
  backend-service:
    name: Backend Verification Service
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: veritas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-verification-service/package-lock.json
        
    - name: Install dependencies
      working-directory: backend-verification-service
      run: npm ci
      
    - name: Lint
      working-directory: backend-verification-service
      run: npm run lint
      
    - name: Type check
      working-directory: backend-verification-service
      run: npm run type-check
      
    - name: Run tests
      working-directory: backend-verification-service
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/veritas_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
      run: npm run test:coverage
      
    - name: Build
      working-directory: backend-verification-service
      run: npm run build
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend-verification-service/coverage/lcov.info
        flags: backend-service
        name: backend-service-coverage

  # Data Pipeline Tests
  data-pipeline:
    name: Data Pipeline
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: veritas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: data-pipeline/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('data-pipeline/pyproject.toml') }}
        
    - name: Install dependencies
      working-directory: data-pipeline
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Lint with ruff
      working-directory: data-pipeline
      run: poetry run ruff check .
      
    - name: Type check with mypy
      working-directory: data-pipeline
      run: poetry run mypy src/
      
    - name: Run tests
      working-directory: data-pipeline
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/veritas_test
        REDIS_URL: redis://localhost:6379
      run: poetry run pytest tests/ --cov=src --cov-report=xml
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: data-pipeline/coverage.xml
        flags: data-pipeline
        name: data-pipeline-coverage

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [browser-extension, backend-service, data-pipeline]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build browser extension Docker image
      working-directory: browser-extension
      run: docker build -t veritas-browser-extension:test .
      
    - name: Build backend service Docker image
      working-directory: backend-verification-service
      run: docker build -t veritas-backend-service:test .
      
    - name: Build data pipeline Docker image
      working-directory: data-pipeline
      run: docker build -t veritas-data-pipeline:test . 